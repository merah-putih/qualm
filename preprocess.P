:- consult(list_utils).
:- consult(app_utils).

:- op(1110,xfy, '<-' ).         % Rule symbol
:- op(1110,fy, '<-' ).         % Rule symbol
:- op(600,fx,#).


:- import comma_to_list/2, memberchk/2, append/3, member/2 from basics.
:- import term_to_atom/2 from string.

:- dynamic rule/2, rule/3, ruleAs/2, lits/1, ruleNames/4, ruleId/3, hasRules/2, hasAssertRules/2, has_facts/2, hasFacts/2, inBody/1.

:- dynamic hasClauses/2. %flag for having rules with 'not make_not' in the body.

%==============================================================
% preprocessClauses(F,ProF) pre-processes the source program in F
% to transform it into rules with 'not make_not' and 'make' in their bodies.
preprocessClauses(File,ProFile) :-
	seeAbFile(File),
	tellPabFile(File,ProFile),
	processC,
	(intv(L) -> processI(L); true), %pre-process only if there is intv/1
	seen,
	told.

%==============================================================
%seeAbFile(F) opens for reading file F.ab
seeAbFile(FileName) :-
	append(FileName,".ab",FExt),
	name(F,FExt),
	see(F).

%==============================================================
% tellPabFile(F,ProF) opens for writing to file F.pab
tellPabFile(FileName,ProF) :-
	append(FileName,".pab",FExt),
	name(ProF,FExt),
	tell(ProF).

%==============================================================
% processC reads and pre-process each line in the source program 
processC :-
	read(C), 
	( C = end_of_file -> true; 
	processPred(C), processC
	). 

%==============================================================
% processI(L) creates rules for each member I of intv(L):
% I <- not make_not(I). %only for I without rules in the source program.
% I <- make(I).
processI(L) :-
	member(N/A,L),
	functor(I,N,A),
	(retract(hasClauses(N,A)) -> true;
	 write(I), write(' <- '), write_list([not make_not(I)]), nl
	),
	write(I), write(' <- '), write_list([make(I)]), nl,
	fail.
processI(_).

%==============================================================
%processPred(C): pre-process each clause C in the source program
processPred(abds(L)) :- !,
	write(abds(L)), write('.'), nl, my_assert(abds(L)).

processPred(intv(L)) :- !,
	write(intv(L)), write('.'), nl, my_assert(intv(L)).

%process the Prolog part (within beginProlog and endProlog)
processPred(beginProlog) :- !,
	tell('prologAuxCode.P'),
	processProlog.


processPred((H <- B)) :- !,
	functor(H,ProH,Art),
	assertIfNot(hasClauses(ProH,Art)),
	processRuleIntv(H,B). %add 'not make_not(H)' in the body, if applicable

processPred(( <- B)) :- !, processIC(B). %add 'false' in the head

processPred(C) :-
	functor(C,ProC,Art),
	assertIfNot(hasClauses(ProC,Art)),
	write(C),
	intv_to_make(C,C1),
	(C1 = [] -> write('.');%C is not in intv/1
	 (write(' <- '), write_list(C1)) %C is in intv/1
	),
	nl.
%==============================================================
%processRuleIntv(H,B) adds to B 'not make_not(H)' if H is in intv/1
processRuleIntv(H,B) :- 
	comma_to_list(B,L),
	intv_to_make(H,H1),
	append(H1,L,B1),
	write(H), write(' <- '), write_list(B1), nl. 

%==============================================================
%processIC(B) adds false as the head of '<- B'
processIC(B) :- 
	comma_to_list(B, L), 
	write(false), write('<- '), write_list(L), nl. 


%==============================================================
%intv_to_make(P,L) constructs 'not make_not(P)' if P is in intv/1

intv_to_make(X,[not make_not(X)]) :- 
	is_interventable(X), !.
intv_to_make(_,[]).


%==============================================================
%loadPro(File) loads pre-processed File (PENDING COMMENT)
loadPro(ProFile) :-
	see(ProFile),
	loadClauses,
	processClauses,
	seen.

%==============================================================
loadClauses :-
    read(C),
    ( C = end_of_file -> verifyLoadedClauses;
      ( loadClause(C), addRuleId(C), loadClauses ) ).

verifyLoadedClauses :-
	retract(has_facts(F,A)),
	(hasRules(F,A) -> true; assert(hasFacts(F,A))),
	fail.
verifyLoadedClauses :- nl.

addRuleId((<- B)) :- !,
	retract(ruleId(false,B,[false,ProB])),
	RuleId =.. ['#(r)',false,ProB],
	makeFact(RuleId).
addRuleId((H <- B)) :- !,
	retract(ruleId(H,B,[ProH,ProB])),
	RuleId =.. ['#(r)',ProH,ProB],
	makeFact(RuleId).
addRuleId(_).

%==============================================================
% loadClause(C) loads each clause C from the pre-processed file.
loadClause(abds(_)) :- !.
loadClause(intv(_)) :- !.

loadClause((H <- B)) :- !,
	makeRule(H,B,RuleName),
	assertIfNot(ruleId(H,B,RuleName)).

loadClause(H) :- !,
	makeFact(H).

%==============================================================
%processProlog writes Prolog part (within beginProlog and endProlog)
%without any changes.
processProlog :-
	read(C),
	( C = end_of_file ->
		(seen, told, write('ERROR: missing endProlog'), nl, abort);
	  C = endProlog -> (told, ensure_loaded(prologAuxCode));
	  	(writeProlog(C), processProlog) ).

writeProlog(C) :- write(C), write('.'), nl.


makeFact(Head) :-
	addToFluents(Head,G,Art,Args),
	assertHasFacts(G,Art),
	Gluent =.. [G|Args],
	my_assert(rule(Gluent,[])).	

makeRule(Head,B,[ProHead,ProB]) :-
	addToFluents(Head,G,Art,Args),
	assertHasRules(G,Art),	
	Gluent =.. [G|Args],
	comma_to_list(B,ListB),
	term_to_atom(Head,ProHead),
	term_to_atom(ListB,ProB),
	loadBody(B,LoadedB),
	assertRuleNames(G),
	(rule(Gluent,[('#(r)',[ProHead,ProB],Hr)|LoadedB]) -> true;
	my_assert(rule(Gluent,[('#(r)',[ProHead,ProB],Hr)|LoadedB]))).

makeRuleAs(assert(F)) :- !,
	addToFluents(assert(F),G,Art,Args),
	assertHasAssertRules(G,Art),		
	Gluent =.. [G,H|Args],
	(ruleAs(Gluent,[(assert(G),Args,Ha), H is Ha+1]) -> true;
	my_assert(ruleAs(Gluent,[(assert(G),Args,Ha), H is Ha+1]))),
	makeRuleAs(F).

makeRuleAs(F) :-
	addToFluents(F,G,Art,Args),
	assertHasAssertRules(G,Art),	
	Gluent =.. [G,H|Args],
	(ruleAs(Gluent,[(assert(G),Args,Ha), H is Ha+1]) -> true;
	my_assert(ruleAs(Gluent,[(assert(G),Args,Ha), H is Ha+1]))).

addToFluents(consider(A),consider,1,[A]) :- !.
addToFluents(H,G,Art,Args) :-
	collectPrefsArt(H,Art,G,Args),
	lits(Fs),
	(atom_concat('not_',Pref,G) -> true; Pref=G),
	addToFluents(Pref,Art,Fs).


addToFluents(Pref,Art,Fs) :-
	memberchk(Pref/Art,Fs), !.
addToFluents(Pref,Art,Fs) :-
	retract(lits(Fs)),
	atom_compl(Pref,Pref_),
	my_incr_dyn(Pref,Art),
	my_incr_dyn(Pref_,Art),
	my_assert(lits([Pref/Art|Fs])).


loadBody((true,B),NA) :- !,
	loadBody(B,NA).
loadBody((prolog(P),B),[(prolog(P),_,_)|NA]) :- !,
	loadBody(B,NA).
%loadBody((prolog(P),B),[prolog(P)|NA]) :- !,
%	loadBody(B,NA).
loadBody(((not A),B),[(not PrefA,Args,_)|Rs]) :- !,
	assertInBody(A),
	addToFluents(A,PrefA,_,Args), 
	loadBody(B,Rs).
loadBody((A,B),[(PrefA,Args,_)|Rs]) :- !,
	assertInBody(A),
	addToFluents(A,PrefA,_,Args), 
	loadBody(B,Rs).
loadBody(true,[]) :- !.
%loadBody(prolog(P),[prolog(P)]) :- !.
loadBody(prolog(P),[(prolog(P),_,_)]) :- !.
loadBody((not A),[(not PrefA,Args,_)]) :- !,
	assertInBody(A),
	addToFluents(A,PrefA,_,Args).
loadBody(A,[(PrefA,Args,_)]) :-
	assertInBody(A),
	addToFluents(A,PrefA,_,Args).

assertHasRules(H,A) :-
	assertIfNot(hasRules(H,A)).

assertHasAssertRules(H,A) :-
	assertIfNot(hasAssertRules(H,A)).


assertInBody(consider(_)) :- !.
assertInBody(make(_)) :- !.
assertInBody(make_not(_)) :- !.
assertInBody(H) :-
	assertIfNot(inBody(H)).

assertHasFacts(H,A) :-
	assertIfNot(has_facts(H,A)).

assertRuleNames(N) :-
	(atom_concat('not_',Pos,N) -> NegN = Pos; renamePred("not_",N,[],NegN)),
	renamePred([],N,"_ab",N_ab),
	renamePred([],N,"_st",N_st),
	assertIfNot(ruleNames(N,N_ab,NegN,N_st)).

%%%%

processClauses :-
	process_init,
	process_FailRules,
	%process_UndefRules,
	process_Abds,
	%process_FailRules,
	process_Facts,
	tellXFile("tab"),
	writeTableDecls, nl,
	process_Rules,
	told,
	process_AssertedRules.

process_init :-
	process_init(make(_),0),
	process_init(make_not(_),0),
	process_init(upd_abd(_),0).

process_init(C,Start) :-
	collectPrefsArt(C,Art,PredName,_),
	makeList(Art,Args),
	processLit(not(PredName),Args,I,I,Start,PL),
	my_incr_assert(PL).	



process_FailRules :-
	retract(inBody(L)),
	hasNoRules(L,Art,PredName),
	makeList(Art,Args),
	processLit(not(PredName),Args,I,I,1,PL),
	my_incr_assert(PL),
	fail.
process_FailRules.


assert_FailRules(false,PL) :- !,
	my_assert(PL).
assert_FailRules(_,PL) :-
	my_incr_assert(PL).

process_UndefRules :-
	retract(inBody(H)), 
	hasNoRules(H,A,L),
	makeList(A,Args),
	processLit(L,Args,I,I,1,PL),
	my_incr_assert((PL :- undef)),
	processLit(not(L),Args,I,I,1,NPL),
	my_incr_assert((NPL :- undef)),
	fail.
process_UndefRules.


hasNoRules(H,A,L) :-
	collectPrefsArt(H,A,L,_),
	\+ hasDefRules(L,A),
	%\+ hasDefAsRules(L,A),
	\+ hasDefFacts(L,A),
	\+ is_abducible(H).

hasDefRules(L,A) :-
	atom_compl(L,L_),
	(hasRules(L,A);hasRules(L_,A)).

hasDefAsRules(L,A) :-
	atom_compl(L,L_),
	(hasAssertRules(L,A);hasAssertRules(L_,A)).

hasDefFacts(L,A) :-
	atom_compl(L,L_),
	(hasFacts(L,A);hasFacts(L_,A)).

process_Abds :-
	get_sol(abds(LAb),LAb),
	process_AbdRules(LAb).

process_AbdRules([]).
process_AbdRules([N/A|L]) :-
	functor(Ab,N,A),
	Ab =.. [AbAtom|AbArgs],
	renamePred("not_",AbAtom,[],Not_AbAtom),
	AbH =.. [AbAtom,I,O,H|AbArgs],
	AbHNeg =.. [Not_AbAtom,I,O,H|AbArgs],
	TimedAb =.. [AbAtom,H|AbArgs],
	my_assert((AbH :- insert(TimedAb,I,O))),
	my_assert((AbHNeg :- insert(not(TimedAb),I,O))),
	process_AbdRules(L).

/*
processAbd(not(H),I,O,ProNotH) :- !,
	H =.. [NameH|ArgsH],
	renamePred("not_",NameH,[],Not_H),
	ProNotH =.. [Not_H,I,O|ArgsH].
processAbd(H,I,O,ProH) :-
	H =.. [NameH|ArgsH],
	ProH =.. [NameH,I,O|ArgsH].
*/

process_Facts :-
	retract(hasFacts(H,A)),
	find_facts(H,A,R),
	processFacts(R),
	processNegFact(H,A),
	fail.
process_Facts.

find_facts(H,A,R) :-
	functor(Head,H,A),
	findall(fact(Head,1),clause(rule(Head,[]),true),R).

processFacts([]).
processFacts([fact(H,TS)|Fs]) :-
	H =.. [Head|Args],
	processAtom(Head,Args,I,I,TS,ProH),
	my_incr_assert(ProH),
	processFacts(Fs).

processNegFact(H,A) :-
	makeList(A,Args),
	processLit(not(H),Args,_,_,_,ProH),
	processAtom(H,Args,_,_,_,ProB),
	my_assert((ProH :- \+ ProB)).

process_Rules :-
	retract(hasRules(H,A)),
	find_rules(H,A,R),
        process_tab_rules(R),
	process_pos_rule(H,A),
	process_neg_rule(H,A,R),
	process_star_rules(H,A,R),
	process_Rules.
process_Rules.



tellXFile(FileName) :-
	append(FileName,".P",FExt),
	name(ProF,FExt),
	tell(ProF).

writeTableDecls :-
	findTabledPred(Ps),
	writeTabledDecl(Ps).


findTabledPred(Ps) :-
	findall(Sig,findTPred(Sig),Ps).

hasNegRule(H) :- negGoal(H), hasRules(H).

findTPred(Sig) :-
	hasRules(N,A),
	ruleNames(N,N_ab,_,_),
	signature(N_ab,A,2,Sig).

% signature/4:
% N/NewA is the signature of the tabled predicate N.

signature(N,A,P,N/NewA) :-
	NewA is A+P.

writeTabledDecl([]).
writeTabledDecl([P|Ps]) :-
	write(':- table '), write(P), write(' as incremental.'), nl,
%	writeL([':- table ', P, ' as incremental.']),
	writeTabledDecl(Ps).


	

/*
find_rules(H,A,R) :-
	functor(Head,H,A),
	findall(rule(Head,Body),clause(rule(Head,Body),true),R).
*/

find_rules(H,A,R) :-
	functor(Head,H,A),
	index_rules(Head,1,R).

index_rules(Head,N,[rule(N,Head,Body)|Rs]) :-
	copy_term(Head,Head1),
	retract(rule(Head,Body)), !,
	my_assert(rule(N,Head,Body)),
	NewN is N+1,
	index_rules(Head1,NewN,Rs).
index_rules(_,_,[]).

/*
extract_abds(B,L_Abds,L_NAbds) :- extract_abds(B,[]*[],L_Abds,L_NAbds).

extract_abds([],A,A,[]).
extract_abds([(consider,[A],T)|Bs],PI*NI,AO,NA) :- !,
	A =.. [AbdL|AbdArg],
	TimedA =.. [AbdL,T|AbdArg],	
	insertElem(TimedA,PI,PO), 
	extract_abds(Bs,PO*NI,AO,NA).
extract_abds([(not consider,[A],T)|Bs],PI*NI,AO,NA) :- !,
	A =.. [AbdL|AbdArg],
	TimedA =.. [AbdL,T|AbdArg],	
	insertElem(not TimedA,NI,NO), 
	extract_abds(Bs,PI*NO,AO,NA).
extract_abds([B|Bs],AI,AO,[B|Cs]) :-
	extract_abds(Bs,AI,AO,Cs).
*/

extract_abds([],[],[]).
extract_abds([(consider,[A],T)|Bs],[(consider,[A],T)|Cs],NA) :- !,
	extract_abds(Bs,Cs,NA).
extract_abds([(not consider,[A],T)|Bs],[(not consider,[A],T)|Cs],NA) :- !,
	extract_abds(Bs,Cs,NA).
extract_abds([B|Bs],Cs,[B|Ns]) :-
	extract_abds(Bs,Cs,Ns).


process_tab_rules([]).
process_tab_rules([rule(_,H,B)|Rs]) :-
	extract_abds(B,Abds,NonAbds),
	append(Abds,NonAbds,ArrangeB),
	process_tab_rule(H,ArrangeB), 
	process_tab_rules(Rs).

process_tab_rule(H,[]) :- !,
	H =.. [Name|Args],
	ruleNames(Name,N_ab,_,_),
	ProH =.. [N_ab,[]*[],1|Args],
	write(ProH), writeln('.'),nl.
%	writeL([ProH, '.']).
	%my_incr_assert(ProH).	

/*
process_tab_rule(H,LAbds,[('#(r)',RuleName,TS)]) :- !, 
	H =.. [Name|Args],
	ruleNames(Name,N_ab,_,_),
	ProH =.. [N_ab,E,TS|Args],
	ProB =.. ['#(r)',LAbds,E,TS|RuleName],
	write(ProH), write(' :- '), writeq(ProB), writeln('.').
%	writeL([ProH, ' :- ', ProB, '.']).
%	my_incr_assert((ProH :- ProB)).
*/

process_tab_rule(H,B) :-
	H =.. [Name|Args],
	ruleNames(Name,N_ab,_,_),
	ProH =.. [N_ab,E,TS|Args],
	processBodyPos(B,[],Latest,ProB,[]*[],E,TS),
	write(ProH), write(' :- '), writeq(ProB), write(', '),
	writeq(Latest), writeln('.'),nl. 
%	writeL([ProH, ' :- ', ProB, ', ', Latest, '.']).
%	my_incr_assert((ProH :- ProB,Latest)).

processBodyPos([A],Ls,Latest,ProA,I,O,TS) :- !,
	processBodyLatest(A,L,ProA,I,O),
	Latest =.. [latest,[L|Ls],TS].

processBodyPos([A|B],Ls,Latest,(ProA,ProB),I,O,TS) :-
	processBodyLatest(A,L,ProA,I,OA),
	processBodyPos(B,[L|Ls],Latest,ProB,OA,O,TS).


process_pos_rule(H,A) :-
	makeList(A,Args),
	ProH =.. [H,I,O,T|Args],
	ruleNames(H,H_ab,_,_),
	ProTabledH =.. [H_ab,E,T|Args],
	my_incr_assert((ProH :- ProTabledH, produce(O,I,E))).
%	RuleProH = [ProH, ' :- ', ProTabledH, ', produce(', O, ', ', I, ', ', E, ').'],
%	writeL(RuleProH).


process_neg_rule(Name,A,R) :-
	ruleNames(Name,_,NegN,N_st),
	makeList(A,Args),
	processLit(NegN,Args,I,O,TS,ProH2),
	process_neg_body(N_st,Args,R,[I,O,TS],[],ProB2),
	my_incr_assert((ProH2 :- ProB2)).

process_neg_body(N_st,Args,[rule(N,_,_)],[I,O,TS],Ls,(B,Latest)) :- !,
	B =.. [N_st,N,LitDual,I,O|Args],
	 Latest =.. [latest,[LitDual|Ls],TS].
process_neg_body(N_st,Args,[rule(N,_,_)|Rs],[I,O,TS],Ls,(B,Bs)) :-
	B =.. [N_st,N,LitDual,I,OA|Args],
	process_neg_body(N_st,Args,Rs,[OA,O,TS],[LitDual|Ls],Bs).

process_star_rules(Name,A,R) :-
	ruleNames(Name,_,_,Name_st),
	makeList(A,Args),
	H =.. [Name|Args],
	process_diff_rules(Name_st,Args,H,R),
	process_dual_template(Name_st,Args,H).

process_diff_rules(_,_,_,[]).
process_diff_rules(Name_st,Args,Head,[rule(N,H,_)|Rs]) :-
	Head_st =.. [Name_st,N,_,I,I|Args],
	my_assert((Head_st :- Head \= H, !)),
	process_diff_rules(Name_st,Args,Head,Rs).

process_dual_template(Name_st,Args,Head) :-
	copy_term(Head,Head1),
	Head_st =.. [Name_st,N,LitDual,I,O|Args],
	my_assert((Head_st :- dual(N,Head1,Head,LitDual,I,O))).

process_AssertedRules :-
	ruleAs(Head,[(H,Arg,TS),Incr]),
	Head =.. [Name|ArgsHead],
	ProHead =.. [Name,I,O|ArgsHead],
	term_to_atom(H,HA),
	ProH =.. [HA,I,O,TS|Arg],
	my_incr_assert((ProHead :- ProH, Incr)),
	%my_incr_assert((ProHead :- fluent(HA,Arg,I,O,TS), Incr)),
	fail.
process_AssertedRules.	
